C51 COMPILER V9.60.7.0   WS2812B                                                           11/06/2023 23:38:38 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE WS2812B
OBJECT MODULE PLACED IN .\Objects\ws2812b.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\lib\SRC\ws2812b.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\src\lib\IN
                    -C) DEBUG OBJECTEXTEND PRINT(.\Listings\ws2812b.lst) OBJECT(.\Objects\ws2812b.obj)

line level    source

   1          /*
   2           * @Description:
   3           * @Blog: saisaiwa.com
   4           * @Author: ccy
   5           * @Date: 2023-11-02 15:21:56
   6           * @LastEditTime: 2023-11-06 10:14:02
   7           */
   8          #include "ws2812b.h"
   9          
  10          /// RGB color representation
  11          typedef struct {
  12              uint8_t r;
  13              uint8_t g;
  14              uint8_t b;
  15          } rgb_t;
  16          
  17          /// HSV color representation
  18          typedef struct {
  19              uint8_t h;
  20              uint8_t s;
  21              uint8_t v;
  22          } hsv_t;
  23          
  24          rgb_t xdata cache_arr[RGB_LED_COUNT];
  25          u8 data buf_arr[RGB_LED_COUNT * 3];
  26          static bit data busy;
  27          
  28          rgb_t hsv2rgb_rainbow(hsv_t hsv);
  29          // rgb_t hsv2rgb_spectrum(hsv_t hsv);
  30          // rgb_t rgb_heat_color(uint8_t temperature);
  31          
  32          void spi_isr() interrupt 9 {
  33   1          SPSTAT = 0xc0;
  34   1          busy = 0;
  35   1      }
  36          
  37          void spi_open() {
  38   1          SPSTAT = 0xc0;
  39   1          SPCTL = 0xd4;  // 1101 0100
  40   1          IE2 |= 0x02;   // 允许中断
  41   1          RGB = 0;
  42   1      }
  43          
  44          void spi_close() {
  45   1          SPCTL = 0x00;
  46   1          RGB = 0;
  47   1      }
  48          
  49          void send_byte(u8 dat) {
  50   1          while (busy)
  51   1              ;
  52   1          SPDAT = dat;
  53   1      }
  54          
C51 COMPILER V9.60.7.0   WS2812B                                                           11/06/2023 23:38:38 PAGE 2   

  55          void send_spi() {
  56   1          u16 len = RGB_LED_COUNT * 3;
  57   1          u8 j, i;
  58   1          spi_open();
  59   1          for (i = 0; i < len; i++) {
  60   2              u8 d1 = buf_arr[i], buf;
  61   2              for (j = 0; j < 8; j++) {
  62   3                  if (d1 & 0x80) {
  63   4                      buf = 0xFC; /*11111100b;*/
  64   4                  } else {
  65   4                      buf = 0XC0; /*11000000b;*/
  66   4                  }
  67   3                  send_byte(buf);
  68   3                  d1 <<= 1;
  69   3              }
  70   2          }
  71   1          spi_close();
  72   1      }
  73          
  74          void rgb_set_color(u8 index, u8 r, u8 g, u8 b) {
  75   1          if (index >= RGB_LED_COUNT) {
  76   2              return;
  77   2          }
  78   1          cache_arr[index].r = r;
  79   1          cache_arr[index].g = g;
  80   1          cache_arr[index].b = b;
  81   1      }
  82          
  83          void rgb_update(u8 brightness) {
  84   1          u8 bi = 0, i = 0;
  85   1          memset(buf_arr, 0, sizeof(buf_arr));
  86   1          for (i = 0; i < RGB_LED_COUNT; i++) {
  87   2              rgb_t* rgb = &cache_arr[i];
  88   2              buf_arr[bi++] = (uint8_t)(((uint16_t)rgb->g * brightness) / 255);
  89   2              buf_arr[bi++] = (uint8_t)(((uint16_t)rgb->r * brightness) / 255);
  90   2              buf_arr[bi++] = (uint8_t)(((uint16_t)rgb->b * brightness) / 255);
  91   2          }
  92   1          send_spi();
  93   1          delay_us(100);
  94   1      }
  95          
  96          void rgb_clear() {
  97   1          u8 i = 0;
  98   1          for (i = 0; i < RGB_LED_COUNT; i++) {
  99   2              rgb_t* rgb = &cache_arr[i];
 100   2              rgb->b = 0;
 101   2              rgb->g = 0;
 102   2              rgb->r = 0;
 103   2          }
 104   1          rgb_update(0);
 105   1      }
 106          
 107          void rgb_frame_update(u8 brightness_val) {
 108   1          static rgb_t rgb;
 109   1          static hsv_t hsv = {0, 100, 255};
 110   1      
 111   1          rgb = hsv2rgb_rainbow(hsv);
 112   1          rgb_set_color(0, rgb.r, rgb.g, rgb.b);
 113   1          rgb_set_color(1, rgb.r, rgb.g, rgb.b);
 114   1          hsv.h += 1;
 115   1          rgb_update(brightness_val);
 116   1      }
C51 COMPILER V9.60.7.0   WS2812B                                                           11/06/2023 23:38:38 PAGE 3   

 117          
 118          /**
 119           * -------------------------------------------------------------------------------------------------
 120           * RGB HSV颜色处理工具
 121           * -------------------------------------------------------------------------------------------------
 122           */
 123          
 124          #define K255 255
 125          #define K171 171
 126          #define K170 170
 127          #define K85 85
 128          
 129          // #define HUE_MAX_RAW 191
 130          // #define APPLY_DIMMING(X) (X)
 131          // #define HSV_SECTION_6 (0x20)
 132          // #define HSV_SECTION_3 (0x40)
 133          
 134          uint8_t scale8(uint8_t i, uint8_t scale) {
 135   1          return (((uint16_t)i) * (1 + (uint16_t)(scale))) >> 8;
 136   1      }
 137          uint8_t scale8_video(uint8_t i, uint8_t scale) {
 138   1          return (((int)i * (int)scale) >> 8) + ((i && scale) ? 1 : 0);
 139   1      }
 140          
 141          rgb_t rgb_from_values(uint8_t r, uint8_t g, uint8_t b) {
 142   1          rgb_t res;
 143   1          res.r = r;
 144   1          res.g = g;
 145   1          res.b = b;
 146   1          return res;
 147   1      }
 148          
 149          rgb_t hsv2rgb_rainbow(hsv_t hsv) {
 150   1          // Yellow has a higher inherent brightness than
 151   1          // any other color; 'pure' yellow is perceived to
 152   1          // be 93% as bright as white.  In order to make
 153   1          // yellow appear the correct relative brightness,
 154   1          // it has to be rendered brighter than all other
 155   1          // colors.
 156   1          // Level Y1 is a moderate boost, the default.
 157   1          // Level Y2 is a strong boost.
 158   1          const uint8_t Y1 = 1;
 159   1          const uint8_t Y2 = 0;
 160   1      
 161   1          // G2: Whether to divide all greens by two.
 162   1          // Depends GREATLY on your particular LEDs
 163   1          const uint8_t G2 = 0;
 164   1      
 165   1          // Gscale: what to scale green down by.
 166   1          // Depends GREATLY on your particular LEDs
 167   1          const uint8_t Gscale = 0;
 168   1      
 169   1          uint8_t hue = hsv.h;
 170   1          uint8_t sat = hsv.s;
 171   1          uint8_t val = hsv.v;
 172   1      
 173   1          uint8_t offset = hue & 0x1F;  // 0..31
 174   1      
 175   1          // offset8 = offset * 8
 176   1          uint8_t offset8 = offset << 3;
 177   1          uint8_t third = scale8(offset8, (256 / 3));  // max = 85
 178   1      
C51 COMPILER V9.60.7.0   WS2812B                                                           11/06/2023 23:38:38 PAGE 4   

 179   1          uint8_t r, g, b;
 180   1      
 181   1          if (!(hue & 0x80)) {
 182   2              // 0XX
 183   2              if (!(hue & 0x40)) {
 184   3                  // 00X
 185   3                  // section 0-1
 186   3                  if (!(hue & 0x20)) {
 187   4                      // 000
 188   4                      // case 0: // R -> O
 189   4                      r = K255 - third;
 190   4                      g = third;
 191   4                      b = 0;
 192   4                  } else {
 193   4                      // 001
 194   4                      // case 1: // O -> Y
 195   4                      if (Y1) {
 196   5                          r = K171;
 197   5                          g = K85 + third;
 198   5                          b = 0;
 199   5                      }
 200   4                      if (Y2) {
 201   5                          uint8_t twothirds =
 202   5                              scale8(offset8, ((256 * 2) / 3));  // max=170
 203   5                          r = K170 + third;
 204   5                          // uint8_t twothirds = (third << 1);
 205   5                          g = K85 + twothirds;
 206   5                          b = 0;
 207   5                      }
 208   4                  }
 209   3              } else {
 210   3                  // 01X
 211   3                  //  section 2-3
 212   3                  if (!(hue & 0x20)) {
 213   4                      // 010
 214   4                      // case 2: // Y -> G
 215   4                      if (Y1) {
 216   5                          // uint8_t twothirds = (third << 1);
 217   5                          uint8_t twothirds =
 218   5                              scale8(offset8, ((256 * 2) / 3));  // max=170
 219   5                          r = K171 - twothirds;
 220   5                          g = K170 + third;
 221   5                          b = 0;
 222   5                      }
 223   4                      if (Y2) {
 224   5                          r = K255 - offset8;
 225   5                          g = K255;
 226   5                          b = 0;
 227   5                      }
 228   4                  } else {
 229   4                      // 011
 230   4                      // case 3: // G -> A
 231   4                      r = 0;
 232   4                      g = K255 - third;
 233   4                      b = third;
 234   4                  }
 235   3              }
 236   2          } else {
 237   2              // section 4-7
 238   2              // 1XX
 239   2              if (!(hue & 0x40)) {
 240   3                  // 10X
C51 COMPILER V9.60.7.0   WS2812B                                                           11/06/2023 23:38:38 PAGE 5   

 241   3                  if (!(hue & 0x20)) {
 242   4                      uint8_t twothirds =
 243   4                          scale8(offset8, ((256 * 2) / 3));  // max=170
 244   4                      // 100
 245   4                      // case 4: // A -> B
 246   4                      r = 0;
 247   4                      // uint8_t twothirds = (third << 1);
 248   4      
 249   4                      g = K171 - twothirds;  // K170?
 250   4                      b = K85 + twothirds;
 251   4      
 252   4                  } else {
 253   4                      // 101
 254   4                      // case 5: // B -> P
 255   4                      r = third;
 256   4                      g = 0;
 257   4                      b = K255 - third;
 258   4                  }
 259   3              } else {
 260   3                  if (!(hue & 0x20)) {
 261   4                      // 110
 262   4                      // case 6: // P -- K
 263   4                      r = K85 + third;
 264   4                      g = 0;
 265   4                      b = K171 - third;
 266   4      
 267   4                  } else {
 268   4                      // 111
 269   4                      // case 7: // K -> R
 270   4                      r = K170 + third;
 271   4                      g = 0;
 272   4                      b = K85 - third;
 273   4                  }
 274   3              }
 275   2          }
 276   1      
 277   1          // This is one of the good places to scale the green down,
 278   1          // although the client can scale green down as well.
 279   1          if (G2)
 280   1              g = g >> 1;
 281   1          if (Gscale)
 282   1              g = scale8_video(g, Gscale);
 283   1      
 284   1          // Scale down colors if we're desaturated at all
 285   1          // and add the brightness_floor to r, g, and b.
 286   1          if (sat != 255) {
 287   2              if (sat == 0) {
 288   3                  r = 255;
 289   3                  b = 255;
 290   3                  g = 255;
 291   3              } else {
 292   3                  uint8_t desat = 255 - sat;
 293   3                  uint8_t satscale, brightness_floor;
 294   3                  desat = scale8_video(desat, desat);
 295   3      
 296   3                  satscale = 255 - desat;
 297   3                  // satscale = sat; // uncomment to revert to pre-2021 saturation
 298   3                  // behavior
 299   3      
 300   3                  // nscale8x3_video( r, g, b, sat);
 301   3                  r = scale8(r, satscale);
 302   3                  g = scale8(g, satscale);
C51 COMPILER V9.60.7.0   WS2812B                                                           11/06/2023 23:38:38 PAGE 6   

 303   3                  b = scale8(b, satscale);
 304   3      
 305   3                  brightness_floor = desat;
 306   3                  r += brightness_floor;
 307   3                  g += brightness_floor;
 308   3                  b += brightness_floor;
 309   3              }
 310   2          }
 311   1      
 312   1          // Now scale everything down if we're at value < 255.
 313   1          if (val != 255) {
 314   2              val = scale8_video(val, val);
 315   2              if (val == 0) {
 316   3                  r = 0;
 317   3                  g = 0;
 318   3                  b = 0;
 319   3              } else {
 320   3                  // nscale8x3_video( r, g, b, val);
 321   3                  r = scale8(r, val);
 322   3                  g = scale8(g, val);
 323   3                  b = scale8(b, val);
 324   3              }
 325   2          }
 326   1      
 327   1          return rgb_from_values(r, g, b);
 328   1      }
 329          /*
 330          rgb_t hsv2rgb_raw(hsv_t hsv) {
 331              // Convert hue, saturation and brightness ( HSV/HSB ) to RGB
 332              // "Dimming" is used on saturation and brightness to make
 333              // the output more visually linear.
 334          
 335              // Apply dimming curves
 336              uint8_t value = APPLY_DIMMING(hsv.v);
 337              uint8_t saturation = hsv.s;
 338          
 339              // The brightness floor is minimum number that all of
 340              // R, G, and B will be set to.
 341              uint8_t invsat = APPLY_DIMMING(255 - saturation);
 342              uint8_t brightness_floor = (value * invsat) / 256;
 343          
 344              // The color amplitude is the maximum amount of R, G, and B
 345              // that will be added on top of the brightness_floor to
 346              // create the specific hue desired.
 347              uint8_t color_amplitude = value - brightness_floor;
 348          
 349              // Figure out which section of the hue wheel we're in,
 350              // and how far offset we are withing that section
 351              uint8_t section = hsv.h / HSV_SECTION_3;  // 0..2
 352              uint8_t offset = hsv.h % HSV_SECTION_3;   // 0..63
 353          
 354              uint8_t rampup = offset;                          // 0..63
 355              uint8_t rampdown = (HSV_SECTION_3 - 1) - offset;  // 63..0
 356          
 357              // We now scale rampup and rampdown to a 0-255 range -- at least
 358              // in theory, but here's where architecture-specific decsions
 359              // come in to play:
 360              // To scale them up to 0-255, we'd want to multiply by 4.
 361              // But in the very next step, we multiply the ramps by other
 362              // values and then divide the resulting product by 256.
 363              // So which is faster?
 364              //   ((ramp * 4) * othervalue) / 256
C51 COMPILER V9.60.7.0   WS2812B                                                           11/06/2023 23:38:38 PAGE 7   

 365              // or
 366              //   ((ramp    ) * othervalue) /  64
 367              // It depends on your processor architecture.
 368              // On 8-bit AVR, the "/ 256" is just a one-cycle register move,
 369              // but the "/ 64" might be a multicycle shift process. So on AVR
 370              // it's faster do multiply the ramp values by four, and then
 371              // divide by 256.
 372              // On ARM, the "/ 256" and "/ 64" are one cycle each, so it's
 373              // faster to NOT multiply the ramp values by four, and just to
 374              // divide the resulting product by 64 (instead of 256).
 375              // Moral of the story: trust your profiler, not your insticts.
 376          
 377              // Since there's an AVR assembly version elsewhere, we'll
 378              // assume what we're on an architecture where any number of
 379              // bit shifts has roughly the same cost, and we'll remove the
 380              // redundant math at the source level:
 381          
 382              //  // scale up to 255 range
 383              //  //rampup *= 4; // 0..252
 384              //  //rampdown *= 4; // 0..252
 385          
 386              // compute color-amplitude-scaled-down versions of rampup and rampdown
 387              uint8_t rampup_amp_adj = (rampup * color_amplitude) / (256 / 4);
 388              uint8_t rampdown_amp_adj = (rampdown * color_amplitude) / (256 / 4);
 389          
 390              // add brightness_floor offset to everything
 391              uint8_t rampup_adj_with_floor = rampup_amp_adj + brightness_floor;
 392              uint8_t rampdown_adj_with_floor = rampdown_amp_adj + brightness_floor;
 393          
 394              rgb_t rgb;
 395              if (section) {
 396                  if (section == 1) {
 397                      // section 1: 0x40..0x7F
 398                      rgb.r = brightness_floor;
 399                      rgb.g = rampdown_adj_with_floor;
 400                      rgb.b = rampup_adj_with_floor;
 401                  } else {
 402                      // section 2; 0x80..0xBF
 403                      rgb.r = rampup_adj_with_floor;
 404                      rgb.g = brightness_floor;
 405                      rgb.b = rampdown_adj_with_floor;
 406                  }
 407              } else {
 408                  // section 0: 0x00..0x3F
 409                  rgb.r = rampdown_adj_with_floor;
 410                  rgb.g = rampup_adj_with_floor;
 411                  rgb.b = brightness_floor;
 412              }
 413          
 414              return rgb;
 415          }
 416          
 417          rgb_t hsv2rgb_spectrum(hsv_t hsv) {
 418              hsv.h = scale8(hsv.h, HUE_MAX_RAW);
 419              return hsv2rgb_raw(hsv);
 420          }
 421          
 422          rgb_t rgb_heat_color(uint8_t temperature) {
 423              rgb_t heatcolor;
 424          
 425              // Scale 'heat' down from 0-255 to 0-191,
 426              // which can then be easily divided into three
C51 COMPILER V9.60.7.0   WS2812B                                                           11/06/2023 23:38:38 PAGE 8   

 427              // equal 'thirds' of 64 units each.
 428              uint8_t t192 = scale8_video(temperature, 191);
 429          
 430              // calculate a value that ramps up from
 431              // zero to 255 in each 'third' of the scale.
 432              uint8_t heatramp = t192 & 0x3F;  // 0..63
 433              heatramp <<= 2;                  // scale up to 0..252
 434          
 435              // now figure out which third of the spectrum we're in:
 436              if (t192 & 0x80) {
 437                  // we're in the hottest third
 438                  heatcolor.r = 255;       // full red
 439                  heatcolor.g = 255;       // full green
 440                  heatcolor.b = heatramp;  // ramp up blue
 441              } else if (t192 & 0x40) {
 442                  // we're in the middle third
 443                  heatcolor.r = 255;       // full red
 444                  heatcolor.g = heatramp;  // ramp up green
 445                  heatcolor.b = 0;         // no blue
 446              } else {
 447                  // we're in the coolest third
 448                  heatcolor.r = heatramp;  // ramp up red
 449                  heatcolor.g = 0;         // no green
 450                  heatcolor.b = 0;         // no blue
 451              }
 452          
 453              return heatcolor;
 454          }*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1112    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     12      35
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
