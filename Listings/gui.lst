C51 COMPILER V9.60.7.0   GUI                                                               11/02/2023 17:52:46 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE GUI
OBJECT MODULE PLACED IN .\Objects\gui.obj
COMPILER INVOKED BY: D:\Embedded_drive\Keil_v5\C51\BIN\C51.EXE src\lib\SRC\gui.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.
                    -\src\lib\INC) DEBUG OBJECTEXTEND PRINT(.\Listings\gui.lst) OBJECT(.\Objects\gui.obj)

line level    source

   1          #include "gui.h"
   2          
   3          u8 lightOff = 1;    // 背光开关
   4          u8 lightLevel = 5;  // 亮度级别
   5          static u8 xdata send_buf[24] = {0};
   6          const u32 xdata fonts[1];
   7          
   8          u32* gui_get_font(char c);
   9          
  10          void start_pwm() {
  11   1          PWMA_CCER1 = 0x00;  // 在设置前先清零
  12   1          PWMA_PSCRH = 0x00;
  13   1          PWMA_PSCRL = 0x00;  // 1分频
  14   1          PWMA_ARRH = (u8)(PWM_ARR >> 8);
  15   1          PWMA_ARRL = (u8)PWM_ARR;
  16   1          PWMA_CCR1H = (u8)(PWM_CCR >> 8);
  17   1          PWMA_CCR1L = (u8)PWM_CCR;
  18   1          PWMA_CCMR1 = 0x68;  //
  19   1          PWMA_CCER1 = 0x01;  // 开启CC1
  20   1          // 输出使能
  21   1          PWMA_ENO = 0x04;   // 使能PWM2P输出
  22   1          PWMA_BKR = 0x80;   // 使能主输出
  23   1          PWMA_PS = 0x00;    // P1.2
  24   1          PWMA_CR1 |= 0x81;  // 开始计时
  25   1      }
  26          
  27          void stop_pwm() {
  28   1          PWMA_CR1 &= 0xFE;  // 关闭定时器
  29   1          PWMA_ENO = 0x00;   // 禁止使能
  30   1      }
  31          
  32          void vfd_gui_init() {
  33   1          VFD_EN = 1;
  34   1          start_pwm();
  35   1          // VFD Setting
  36   1          setDisplayMode(3);
  37   1          setModeWirteDisplayMode(0);
  38   1          vfd_gui_set_blk_level(lightLevel);
  39   1          vfd_gui_clear();
  40   1      }
  41          
  42          void vfd_gui_stop() {
  43   1          VFD_EN = 0;
  44   1          stop_pwm();
  45   1          vfd_gui_clear();
  46   1      }
  47          
  48          void vfd_gui_clear() {
  49   1          memset(send_buf, 0x00, sizeof(send_buf));
  50   1          sendDigAndData(0, send_buf, 24);
  51   1      }
  52          
  53          void vfd_gui_set_one_text(size_t index, char oneChar) {
  54   1          uint8_t arr[3];
C51 COMPILER V9.60.7.0   GUI                                                               11/02/2023 17:52:46 PAGE 2   

  55   1          u32* buf = gui_get_font(oneChar);
  56   1          arr[0] = (*buf >> 16) & 0xFF;
  57   1          arr[1] = (*buf >> 8) & 0xFF;
  58   1          arr[2] = *buf & 0xFF;
  59   1          sendDigAndData(index * 3, arr, 3);
  60   1      }
  61          
  62          void vfd_gui_set_icon(u32 buf) {
  63   1          uint8_t arr[3];
  64   1          arr[0] = (buf >> 16) & 0xFF;
  65   1          arr[1] = (buf >> 8) & 0xFF;
  66   1          arr[2] = buf & 0xFF;
  67   1          sendDigAndData(0, arr, 3);
  68   1      }
  69          
  70          u8 vfd_gui_set_text(const char* string, const u8 colon) {
  71   1          size_t str_len = strlen(string);
  72   1          size_t index = 0, i = 0;
  73   1          size_t len = str_len > VFD_DIG_LEN ? VFD_DIG_LEN : str_len;
  74   1          memset(send_buf, 0x00, sizeof(send_buf));
  75   1          for (i = 0; i < len; i++) {
  76   2              if (string[i] && string[i] != '\0') {
  77   3                  u32* buf = gui_get_font(string[i]);
  78   3                  send_buf[index++] = (*buf >> 16) & 0xFF;
  79   3                  send_buf[index++] = (*buf >> 8) & 0xFF;
  80   3                  send_buf[index++] = *buf & 0xFF;
  81   3              }
  82   2          }
  83   1          if (colon) {
  84   2              send_buf[5] |= 0x10;
  85   2              send_buf[11] |= 0x10;
  86   2          }
  87   1          sendDigAndData(3, send_buf, 24);
  88   1          return 1;
  89   1      }
  90          
  91          void vfd_gui_set_bck(u8 onOff) {
  92   1          lightOff = onOff;
  93   1          ptSetDisplayLight(lightOff, lightLevel);
  94   1      }
  95          
  96          /**
  97           * 亮度调节 1~7
  98           */
  99          void vfd_gui_set_blk_level(size_t level) {
 100   1          lightLevel = level;
 101   1          ptSetDisplayLight(lightOff, lightLevel);
 102   1      }
 103          
 104          long map(long x, long in_min, long in_max, long out_min, long out_max) {
 105   1          const long dividend = out_max - out_min;
 106   1          const long divisor = in_max - in_min;
 107   1          const long delta = x - in_min;
 108   1          return (delta * dividend + (divisor / 2)) / divisor + out_min;
 109   1      }
 110          
 111          u32* gui_get_font(char c) {
 112   1          if (c == ' ') {
 113   2              return 0x00;
 114   2          }
 115   1          if (c >= 33 && c <= 96) {
 116   2              // ! ~ `
C51 COMPILER V9.60.7.0   GUI                                                               11/02/2023 17:52:46 PAGE 3   

 117   2              return &fonts[map(c, 33, 96, 0, 63)];
 118   2          } else if (c >= 97 && c <= 122) {
 119   2              // a~z
 120   2              return gui_get_font(c - 32);
 121   2          } else {
 122   2              return 0;
 123   2          }
 124   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1055    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     30      58
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
